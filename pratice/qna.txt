1. replace >> 특정 문자열 원하는 것으로 바꾸기 
   str2 = str.replace('qwe','new')

2. list 옵션 
append >> 맨뒤에 넣기 
insert(index,넣을것) >> 인덱스 값에넣고 나머지 한개씩 밀림
pop >> 뒤에서 한개씩 뺌
clear >> 리스트값 모두 삭제

3. 세트 (set)
선언 >> {1,2,3} 딕셔너리랑 같은데 벨류값만 존재
중복안됨, 순서없음

 4. 반복문 옵션
 컨틴뉴 >> 그뒤에를 실행하지않고 다음반복으로 넘어감
브레이크 >> 반복문 탈출

5. 줄바꿈 >> 역슬래쉬(\) 하면 한줄로 인정됨

6. 가급적 전역변수 사용 x 

7. 이뮤터블 vs 뮤터블 
(정수, 실수, 문자열, 튜플) vs  리스트, 딕셔너리, 집합
 
8. __name__ >> 실행 하는 함수가 메인이라면 메인 import되어 불러오면 파일이름

9. 다중상속때는 super()를 사용할때 첫번째 상속의 생성자만 실행하기때문에
   spuer 말고 직접 생성자를 적어준다

10.  with 함수  >> with open(옵션들) as (변수이름):
파일 입출력을 편하게 만들어주고 close를 자동으로 해줌

11. raise 에러 or 예외를 발생시키기

12. __str__ 인스턴스가 문자열로 어떻게 표현될지 결정을 해주는 역할
객체 자체를 출력할때 넘겨주는 형식

13. __repr__  사용자가 객체 자체를 이해할 수 있게 표현해주는 메서드이다.

14. 예외처리의 이유 > 오류로인해 프로그램 강제 종료되는 것을 막음

15. finally >> 예외처리에서 마지막에 씀 > 오류 여부상관없이 실행하는 것

16. from module import * 모듈 가져오는데 구분자없이 바로쓸 수 있음

17. dir( x  )>> x라는 어떤 객체가 어떤 함수를 가지고 있는지
ex) x가 리스트면 > list에서 사용 가능한 함수들 


18.   외장함수 glob >> 경로내의 폴더 / 파일 목록 조회

19. 포맷팅 옵션//   :!<10  >> !를 10개기준 왼쪽정렬 :>오른쪽 :^ 가운데 
		:0.2f >> 소수점 2자리까지만 표기하겠다

20.  word = python >> word[:2]  >>> py
	              >> word[::-1]  >>> nohtyp (거꾸로) 
 
21.  f-string을 쓰자

22. eval 함수 ( 위험하지만 재밌는 함수)
	>> 수식을 받아서 실행해준다 ,  해당 표현식을 그대로 실행

23. 경로 복사에서 쓸때 역슬래시로 복사되는데 역슬래시2개나 슬래시로 바꿔야댐  
   (탈출문자 때문)

24. os.path.dirname(__file__)  >> 현재 파일의 위치 반환

25. os.path.join( 기존 경로 , "추가할 것") >> join으로 경로를 합쳐서 반환 
 
26. 파이썬 다중상속의 원리

27. iterable객체는 반복가능한 객체 ex) list, tuple, dic, str  

28. map(함수,iterable타입) >> 매핑함수

29. Container타입 객체 ex) dic, set

30. 재귀함수 > 응용 잘하면 좋은 코드 짤 수 있을 듯?

31. **kwargs >> 함수의 파라미터로 **을 주면 딕셔너리가 된다 

32. return >> return으로 함수를 즉시 빠져나가는 방법을 자주 사용한다, 

33. 항상변하는게 아닐때 함수의 매개변수 초기값 선언을 해준다 (매개변수=값)
	단 초기화시키고 싶은 매개변수를 항상 뒤쪽 
34. input() + split() 으로 입력받은거 나눔 map()이나 강제형변환 응용해서씀

35. global >> 함수는 독립적으로 존재하는 것이 좋기 때문에 가급적 x 

36. lamda >> 익명함수 ,함수가 복잡하지 않을때 함수를 한줄로 간결하게 만들때 사용 
	       ex) 메모리절약, 함수안에서 def를 사용하지 못할때 >> (lambda a, b : a+b)(3,4)

37. str.strip() >> 문자열 공백 제거 

38. sum(a) >> 리스트나 튜플의 합을 구함 sum(a,b) 이런식으로 쓰는 거 아님 

39. list.sort()  >> 리스트를 정렬해서 변환
    sorted(list) >> 본체는 냅두고 정렬할 새로운 리스트 반환

40. 특이한 파이썬의 and, or 연산값 

41. ==는 값을 비고 is는 객체를 비교 (고유의 id값으로)

42. x in list, x not in list 값이 있는지 없는지 확인 (리스트, 문자열, 튜플, 딕셔너리, 집합 등)

43. 반복문에 else 사용가능 >> while의 else는 if때와 동일, for문은 모두 실행된 후 else 실행 

44. 재귀함수를 통해 점화식을 표현가능 

45. 딕셔너리는 요솟값을 구하려고할때 단한가지임 > KEY값을 이용한 방법 // 애초에 순서가 없어서 인덱스 사용 안됨

46. dict.get(key,n) = key값에 해당하는 값이 없으면 n을 리턴해서 오류가 발생하지 않음 >> n 생략하면 기본값은 none

47. pop() vs dell 차이 둘다 인덱스로 값을 지우지만 pop은 지운것을 반환 dell은 반환안함
    remove() >> pop, dell과 다르게 값으로 지움, 중복시 먼저나온 값 // 3개다 원본 값을 바꾸기때문에 주의

48. 음수 index >> 맨 뒤부터 -1임 
	ex) list[-1] >> 맨뒤 // list[:-1] >> 0부터 -1전까지 니까 마지막의 2번째부터 (-1은 포함x )  

49. 변수에 객체를 할당하면 네임스페이스 안에 저장 // 상위(밖)는 하위(안) 참조x  , 하위는 상위 참조가능 

50. packing >> 함수의 인자의 개수를 유연하게 해줌 def func(*args): print(args)  >> 매개변수 앞에 *
    unpacking은 여러개의 객체를 포함하고 있는 하나의 객체를 풀어줌 >> 인자 앞에 * 

51. 에러발생시키기 > raise

52. 예외처리 >> try >>  except

53. 컴프리헨션 >> [x for x in range(10)] 와 같이 간단히 줄여쓰도록 지원하는 것 
    컴프리헨션 문법을 사용하면 제너레이터가 생성됨  >> 리스트는 평가되있기 때문에 제너레이터 생성x 

54. 제너레이터는 기억하지않는 1회용 이라서 소비되고 next(gen) 함수로 하나씩 사용가능 

55. 비교적 자주쓰는 내장함수!~
    abs() > 절대값 // all() > iterable자료형의 각항들이 전부 참일때 만 참  
	any() > 하나라도 참이면 참 all()과 반대
    divmod(a, b) > a/b, a%b를 튜플로 반환 
	filter() > map()과 문법 동일 조건에 의해 iterable자료형을 걸러내는 함수 (for문과 같이씀)
    hex() > 16진수 // oct() > 8진수 // pow(x, y) > x의 y제곱

56. list(range(5, 10)) [5, 6, 7, 8, 9]

57. enumerate() // 주로 for문과 같이사용하여 iterable자료형을 (인덱스 , 값 ) 의 튜플로 반환 // 당연히 str도 가능함

58. pickle 모듈 사용하기 // pickle.dump(data, file) 넣기 pickle.load(file)로 불러오기

59. time.sleep(1) // 잠시 재우기  time.ctime() // 현재시간

60. random.randint(1, 10) // 1 ~ 10 무작위 난수 // choice > 무작위 가져옴 // shuffle 섞기

61. join() >>  '구분자'.join(리스트)

62. 예외처리시 에러 발생하는 순간 탈출 후 finally

63. list >> string 변환시  ''.join(list) // ** 단 list의 모든 원소가 str형태여야함 정수,실수이면 join 에러

64. replace(old, new) >> 문자열 변경함수 

65. String.split('구분자') >> 문자열을 구분자를 통하여 리스트로 반환  

66. os.path.dirname(__file__) // 현재파일의 위치 


=========================================================
current // 현재의 
elapsed time  // 경과 시간
rect >> rectangle // (직사각형) 범위
widh 너비
height 높이
add mul sub div // 사측연산
collide  // 충돌하다
collision // 충돌
position (pos) // 위치 