1. replace >> 특정 문자열 원하는 것으로 바꾸기 
str2 = str.replace('qwe','new')

2. list 옵션 
append >> 맨뒤에 넣기 
insert(index,넣을것) >> 인덱스 값에넣고 나머지 한개씩 밀림
pop >> 뒤에서 한개씩 뺌
clear >> 리스트값 모두 삭제

3. 세트 (set)
선언 >> {1,2,3} 딕셔너리랑 같은데 벨류값만 존재
중복안됨, 순서없음

 4. 반복문 옵션
 컨틴뉴 >> 그뒤에를 실행하지않고 다음반복으로 넘어감
브레이크 >> 반복문 탈출

5. 줄바꿈 >> 역슬래쉬(\) 하면 한줄로 인정됨

6. 가급적 전역변수 사용 x 

7. 이뮤터블 vs 뮤터블 
(정수, 실수, 문자열, 튜플) vs  리스트, 딕셔너리, 집합
 
8. __name__ >> 실행 하는 함수가 메인이라면 메인 import되어 불러오면 파일이름

9. 다중상속때는 super()를 사용할때 첫번째 상속의 생성자만 실행하기때문에
   spuer 말고 직접 생성자를 적어준다

10.  with 함수  >> with open(옵션들) as (변수이름):
파일 입출력을 편하게 만들어주고 close를 자동으로 해줌

11. raise 에러 or 예외를 발생시키기

12. __str__ 인스턴스가 문자열로 어떻게 표현될지 결정을 해주는 역할
객체 자체를 출력할때 넘겨주는 형식

13. __repr__  사용자가 객체 자체를 이해할 수 있게 표현해주는 메서드이다.

14. 예외처리의 이유 > 오류로인해 프로그램 강제 종료되는 것을 막음

15. finally >> 예외처리에서 마지막에 씀 > 오류 여부상관없이 실행하는 것

16. from module import * 모듈 가져오는데 구분자없이 바로쓸 수 있음

17. dir( x  )>> x라는 어떤 객체가 어떤 함수를 가지고 있는지
ex) x가 리스트면 > list에서 사용 가능한 함수들 


18.   외장함수 glob >> 경로내의 폴더 / 파일 목록 조회

19. 포맷팅 옵션//   :!<10  >> !를 10개기준 왼쪽정렬 :>오른쪽 :^ 가운데 
		:0.2f >> 소수점 2자리까지만 표기하겠다

20.  word = python >> word[:2]  >>> py
	              >> word[::-1]  >>> nohtyp (거꾸로) 
 
21.  f-string을 쓰자

22. eval 함수 ( 위험하지만 재밌는 함수)
	>> 수식을 받아서 실행해준다 ,  해당 표현식을 그대로 실행

23. 경로 복사에서 쓸때 역슬래시로 복사되는데 역슬래시2개나 슬래시로 바꿔야댐  
   (탈출문자 때문)

24. os.path.dirname(__file__)  >> 현재 파일의 위치 반환

25. os.path.join( 기존 경로 , "추가할 것") >> join으로 경로를 합쳐서 반환 
 
26. 파이썬 다중상속의 원리


